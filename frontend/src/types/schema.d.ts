/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  '/api/v1/checkouts': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * List all currently checked out items
     * @description Get a list of all items that are currently checked out
     */
    get: operations['show_checked_out_list']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/v1/health': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** Check if the API server is running */
    get: operations['health_check']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/v1/health/db': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** Check if the database connection is healthy */
    get: operations['health_check_db']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/v1/items': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * List items
     * @description Get a paginated list of all items
     */
    get: operations['list_items']
    put?: never
    /**
     * Create a new item
     * @description Create a new item with the provided details. The item category (general, book, or laptop) determines the required fields.
     */
    post: operations['create_item']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/v1/items/{item_id}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Get item by ID
     * @description Get details of a specific item by its ID
     */
    get: operations['get_item']
    /**
     * Update item
     * @description Update an existing item with new details
     */
    put: operations['update_item']
    post?: never
    /**
     * Delete item
     * @description Delete an existing item
     */
    delete: operations['delete_item']
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/v1/items/{item_id}/checkout-history': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Get item checkout history
     * @description Get the complete checkout history for a specific item
     */
    get: operations['checkout_history']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/v1/items/{item_id}/checkouts': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /**
     * Checkout an item
     * @description Create a new checkout record for an item
     */
    post: operations['checkout_book']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/v1/items/{item_id}/checkouts/{checkout_id}/returned': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    /**
     * Return a checked out item
     * @description Mark a checked out item as returned
     */
    put: operations['return_book']
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/v1/users': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Get a list of all users
     * @description Retrieve a list of all registered users
     */
    get: operations['list_users']
    put?: never
    /**
     * Register a new user (Admin only)
     * @description Create a new user account. Only administrators can perform this operation.
     */
    post: operations['register_user']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/v1/users/me': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Get current user information
     * @description Retrieve the authenticated user's profile information
     */
    get: operations['get_current_user']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/v1/users/me/checkouts': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Get user's active checkouts
     * @description Retrieve a list of items currently checked out by the authenticated user
     */
    get: operations['get_checkouts']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/v1/users/me/password': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    /**
     * Change user password
     * @description Update the authenticated user's password
     */
    put: operations['change_password']
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/v1/users/{user_id}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    post?: never
    /**
     * Delete a user account (Admin only)
     * @description Delete an existing user account. Only administrators can perform this operation.
     */
    delete: operations['delete_user']
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/v1/users/{user_id}/role': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    /**
     * Change user role (Admin only)
     * @description Update the role of an existing user. Only administrators can perform this operation.
     */
    put: operations['change_role']
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/auth/login': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /**
     * Login to get access token
     * @description Authenticate with email and password to get an access token
     */
    post: operations['login']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
}
export type webhooks = Record<string, never>
export interface components {
  schemas: {
    AccessTokenResponse: {
      accessToken: string
      userId: components['schemas']['UserId']
    }
    BookResponse: {
      author: string
      checkout?: null | components['schemas']['ItemCheckoutResponse']
      description: string
      id: components['schemas']['ItemId']
      isbn: string
      name: string
    }
    CheckoutId: string
    CheckoutResponse: {
      /**
       * Format: date-time
       * @example 2024-04-10T13:15:00Z
       */
      checkedOutAt: string
      checkedOutBy: components['schemas']['UserId']
      id: components['schemas']['CheckoutId']
      itemId: components['schemas']['ItemId']
      /** Format: date-time */
      returnedAt: string
    }
    CheckoutUser: {
      id: components['schemas']['UserId']
      name: string
    }
    CheckoutsResponse: {
      items: components['schemas']['CheckoutResponse'][]
    }
    CreateItemRequest:
      | {
          /** @enum {string} */
          category: 'general'
          description: string
          name: string
        }
      | {
          author: string
          /** @enum {string} */
          category: 'book'
          description: string
          isbn: string
          name: string
        }
      | {
          /** @enum {string} */
          category: 'laptop'
          description: string
          /** @example 00:00:00:00:00:00 */
          mac_address: string
          name: string
        }
    CreateUserRequest: {
      email: string
      name: string
      password: string
    }
    GeneralItemResponse: {
      checkout?: null | components['schemas']['ItemCheckoutResponse']
      description: string
      id: components['schemas']['ItemId']
      name: string
    }
    /** @enum {string} */
    ItemCategory: 'general' | 'book' | 'laptop'
    ItemCheckoutResponse: {
      /**
       * Format: date-time
       * @example 2024-04-10T13:15:00Z
       */
      checkedOutAt: string
      checkedOutBy: components['schemas']['CheckoutUser']
      id: components['schemas']['CheckoutId']
    }
    ItemId: string
    ItemResponse:
      | (components['schemas']['GeneralItemResponse'] & {
          /** @enum {string} */
          category: 'general'
        })
      | (components['schemas']['BookResponse'] & {
          /** @enum {string} */
          category: 'book'
        })
      | (components['schemas']['LaptopResponse'] & {
          /** @enum {string} */
          category: 'laptop'
        })
    LaptopResponse: {
      checkout?: null | components['schemas']['ItemCheckoutResponse']
      description: string
      id: components['schemas']['ItemId']
      /** @example 00:00:00:00:00:00 */
      macAddress: string
      name: string
    }
    ListQuery: {
      category?: null | components['schemas']['ItemCategory']
      /** Format: int64 */
      limit?: number
      /** Format: int64 */
      offset?: number
    }
    LoginRequest: {
      email: string
      password: string
    }
    PaginatedItemResponse: {
      items: components['schemas']['ItemResponse'][]
      /** Format: int64 */
      limit: number
      /** Format: int64 */
      offset: number
      /** Format: int64 */
      total: number
    }
    /** @enum {string} */
    RoleName: 'Admin' | 'User'
    UpdateItemRequest:
      | {
          /** @enum {string} */
          category: 'general'
          description: string
          name: string
        }
      | {
          author: string
          /** @enum {string} */
          category: 'book'
          description: string
          isbn: string
          name: string
        }
      | {
          /** @enum {string} */
          category: 'laptop'
          description: string
          /** @example 00:00:00:00:00:00 */
          mac_address: string
          name: string
        }
    UpdateUserPasswordRequest: {
      currentPassword: string
      newPassword: string
    }
    UpdateUserRoleRequest: {
      role: components['schemas']['RoleName']
    }
    UserId: string
    UserResponse: {
      email: string
      id: components['schemas']['UserId']
      name: string
      role: components['schemas']['RoleName']
    }
    UsersResponse: {
      items: components['schemas']['UserResponse'][]
    }
  }
  responses: never
  parameters: never
  requestBodies: never
  headers: never
  pathItems: never
}
export type $defs = Record<string, never>
export interface operations {
  show_checked_out_list: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Success */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['CheckoutsResponse']
        }
      }
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
    }
  }
  health_check: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description API server is healthy */
      200: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
    }
  }
  health_check_db: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Database connection is healthy */
      200: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Database connection failed */
      500: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
    }
  }
  list_items: {
    parameters: {
      query: {
        /** @description Number of items to return */
        limit: number
        /** @description Number of items to skip */
        offset: number
      }
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Success */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['PaginatedItemResponse']
        }
      }
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
    }
  }
  create_item: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['CreateItemRequest']
      }
    }
    responses: {
      /** @description Item created successfully */
      201: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Invalid request body */
      400: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
    }
  }
  get_item: {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description Item ID */
        item_id: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Success */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ItemResponse']
        }
      }
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Item not found */
      404: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
    }
  }
  update_item: {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description Item ID */
        item_id: string
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['UpdateItemRequest']
      }
    }
    responses: {
      /** @description Item updated successfully */
      200: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Invalid request body */
      400: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Item not found */
      404: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
    }
  }
  delete_item: {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description Item ID */
        item_id: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Item deleted successfully */
      200: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Item not found */
      404: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
    }
  }
  checkout_history: {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description Item ID */
        item_id: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Success */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['CheckoutsResponse']
        }
      }
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Item not found */
      404: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
    }
  }
  checkout_book: {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description Item ID to checkout */
        item_id: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Item checked out successfully */
      201: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Item not found */
      404: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Item already checked out */
      409: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
    }
  }
  return_book: {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description Item ID to return */
        item_id: string
        /** @description Checkout record ID */
        checkout_id: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Item returned successfully */
      200: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Item or checkout record not found */
      404: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
    }
  }
  list_users: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Success */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['UsersResponse']
        }
      }
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
    }
  }
  register_user: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['CreateUserRequest']
      }
    }
    responses: {
      /** @description User created successfully */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['UserResponse']
        }
      }
      /** @description Invalid request body */
      400: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Forbidden - Admin access required */
      403: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
    }
  }
  get_current_user: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Success */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['UserResponse']
        }
      }
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
    }
  }
  get_checkouts: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Success */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['CheckoutsResponse']
        }
      }
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
    }
  }
  change_password: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['UpdateUserPasswordRequest']
      }
    }
    responses: {
      /** @description Password updated successfully */
      200: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Invalid request body */
      400: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Invalid current password */
      403: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
    }
  }
  delete_user: {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description User ID */
        user_id: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description User deleted successfully */
      200: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Forbidden - Admin access required */
      403: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description User not found */
      404: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
    }
  }
  change_role: {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description User ID */
        user_id: string
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['UpdateUserRoleRequest']
      }
    }
    responses: {
      /** @description Role updated successfully */
      200: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Invalid request body */
      400: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Forbidden - Admin access required */
      403: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description User not found */
      404: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
    }
  }
  login: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['LoginRequest']
      }
    }
    responses: {
      /** @description Login successful */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['AccessTokenResponse']
        }
      }
      /** @description Invalid credentials */
      400: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
    }
  }
}
